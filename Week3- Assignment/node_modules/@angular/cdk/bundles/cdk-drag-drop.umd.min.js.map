{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  AfterContentInit,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListSortingDisabled')\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\n  set sortingDisabled(value: boolean) {\n    this._sortingDisabled = coerceBooleanProperty(value);\n  }\n  private _sortingDisabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    /** Element that the drop list is attached to. */\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    @Optional() @Inject(DOCUMENT) _document?: any,\n\n    /**\n     * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n     * Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop) {\n\n    // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n    if (dragDrop) {\n      this._dropListRef = dragDrop.createDropList(element);\n    } else {\n      this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n    }\n\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold && (Date.now() >= this._dragStartTime + (this.dragStartDelay || 0))) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      getPreviewInsertionPoint(this._document).appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return documentRef.fullscreenElement ||\n         documentRef.webkitFullscreenElement ||\n         documentRef.mozFullScreenElement ||\n         documentRef.msFullscreenElement ||\n         documentRef.body;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Direction} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  readonly element: HTMLElement;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = true;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cacheOwnPosition();\n    this._cacheItemPositions();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n    if (newIndex === -1) {\n      // We use the coordinates of where the item entered the drop\n      // zone to figure out at which index it should be inserted.\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    viewportRuler: ViewportRuler,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n    @Optional() private _dir: Directionality,\n\n    /**\n     * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop,\n    private _changeDetectorRef?: ChangeDetectorRef) {\n\n\n    // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler,\n          dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = this.dragStartDelay;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n"],"names":["value","this","_disabled","coerceBooleanProperty","CdkDropListGroup","prototype","ngOnDestroy","_items","clear","type","Directive","args","selector","exportAs","disabled","Input","_uniqueIdCounter","CdkDropList","element","dragDropRegistry","_changeDetectorRef","_dir","_group","_document","dragDrop","_this","_destroyed","Subject","connectedTo","orientation","id","_sortingDisabled","enterPredicate","dropped","EventEmitter","entered","exited","sorted","_dropListRef","createDropList","DropListRef","document","data","drag","drop","_syncInputs","_handleEvents","_dropLists","push","add","Object","defineProperty","ngAfterContentInit","_draggables","changes","pipe","startWith","takeUntil","subscribe","items","withItems","map","_dragRef","index","indexOf","splice","delete","dispose","next","complete","start","item","currentIndex","previousContainer","isPointerOverContainer","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","ref","change","withDirection","beforeStarted","siblings","coerceArray","find","list","forEach","lockAxis","sortingDisabled","filter","withOrientation","markForCheck","event","emit","container","previousIndex","providers","provide","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDropRegistry","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","Inject","DOCUMENT","DragDrop","ContentChildren","forwardRef","CdkDrag","descendants","Output","DragDropModule","NgModule","declarations","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","removeAttribute","i","length","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","startsWith","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","body","moveItemInArray","array","fromIndex","toIndex","from","to","target","delta","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","started","released","ended","moved","Observable","observer","subscription","unsubscribe","_pointerDown","targetHandle","handle","contains","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","Date","now","_dragStartTime","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","withBoundaryElement","boundaryElement","_destroyPreview","_destroyPlaceholder","removeDragItem","_nextSibling","reset","disableHandle","enableHandle","direction","_withDropContainer","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","_a","newContainer","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_activeDraggables","slice","_cacheOwnPosition","_cacheItemPositions","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","activeDraggables","newPositionReference","_reset","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","Injectable","providedIn","NgZone","DEFAULT_CONFIG","createDrag","ViewportRuler","CDK_DROP_LIST","InjectionToken","CDK_DRAG_PARENT","parentDrag","_stateChanges","_parentDrag","templateRef","TemplateRef","CDK_DRAG_CONFIG","factory","dropContainer","_viewContainerRef","viewportRuler","movedEvent","ngAfterViewInit","onStable","asObservable","take","_updateRootElement","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","firstChange","rootElementSelector","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundaryElementSelector","dir","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","ViewContainerRef","ContentChild"],"mappings":"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"}